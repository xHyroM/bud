name: CI
on:
  push:
  pull_request:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Test
        run: cargo test --verbose --workspace

      - name: Clippy
        run: cargo clippy --verbose --workspace -- -D warnings

      - name: Audit
        run: cargo audit

  compile:
    name: Compile ${{ matrix.target }}
    runs-on: ${{ matrix.runs-on && matrix.runs-on || 'ubuntu-latest'  }}
    if: github.event_name == 'push'
    needs: check
    strategy:
      fail-fast: false
      matrix:
        include:
          # windows
          - target: x86_64-pc-windows-gnu
            archive: zip
            executable-path: target/{target}/release/bud.exe
          # linux
          - target: x86_64-unknown-linux-gnu
            archive: tar.gz
            executable-path: target/{target}/release/bud
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
            executable-path: target/{target}/release/bud
          # darwin
          - target: x86_64-apple-darwin
            archive: zip
            executable-path: target/release/bud
            runs-on: macos-latest
          # i686
          # windows
          - target: i686-pc-windows-gnu
            archive: zip
            executable-path: target/{target}/release/bud.exe
          # linux
          - target: i686-unknown-linux-gnu
            archive: tar.gz
            executable-path: target/{target}/release/bud

    steps:
      - uses: actions/checkout@v3

      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install dependencies
        if: matrix.target != 'x86_64-apple-darwin'
        run: |
          sudo apt-get -y upgrade
          sudo apt-get -y install podman
          sudo apt-get -y install libssl-dev

      - name: Install cross
        if: matrix.target != 'x86_64-apple-darwin'
        run: cargo install cross

      - name: Add target
        if: matrix.target != 'x86_64-apple-darwin'
        run: rustup target add ${{ matrix.target }}

      - name: Compile
        if: matrix.target != 'x86_64-apple-darwin'
        run: cross build --release --workspace --target=${{ matrix.target }}

      - name: Compile
        if: matrix.target == 'x86_64-apple-darwin'
        run: cargo build --release --workspace

      - name: Executable path
        id: vars
        run: |
          executable_path=${{ matrix.executable-path }}
          executable_path=${executable_path/\{target\}/${{ matrix.target }}}
          echo "executable_path=$executable_path" > $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            ${{ steps.vars.outputs.executable_path }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: compile
    if: github.event_name == 'push' && !startsWith(github.event.head_commit.message, '[skip release]')

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Zip
        run: |
          mkdir result
          zip -r result/86_64-pc-windows-gnu.zip artifacts/x86_64-pc-windows-gnu
          zip -r result/x86_64-apple-darwin.zip artifacts/x86_64-apple-darwin
          tar -czf result/x86_64-unknown-linux-gnu.tar.gz artifacts/x86_64-unknown-linux-gnu
          tar -czf result/x86_64-unknown-linux-musl.tar.gz artifacts/x86_64-unknown-linux-musl

          zip -r result/i686-pc-windows-gnu.zip artifacts/i686-pc-windows-gnu
          tar -czf result/i686-unknown-linux-gnu.tar.gz artifacts/i686-unknown-linux-gnu

      - name: Get short SHA
        id: vars
        run: echo "sha_short=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Create the release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ steps.vars.outputs.sha_short }}
          name: Nightly Build ${{ steps.vars.outputs.sha_short }}
          draft: false
          prerelease: true
          files: |
            result/*
